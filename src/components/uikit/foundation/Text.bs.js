// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Theme$KalseljsCommunityPage = require("./Theme.bs.js");
var Utils$KalseljsCommunityPage = require("../../../commons/Utils.bs.js");

var base = Css.style(/* :: */[
      Css.borderWidth(Css.zero),
      /* :: */[
        Css.boxSizing(/* borderBox */9307263),
        /* :: */[
          Css.color(/* currentColor */292050538),
          /* :: */[
            Css.display(/* inline */423610969),
            /* :: */[
              Css.fontFamily("Rubik, sans-serif"),
              /* :: */[
                Css.fontStyle(/* inherit_ */-601204732),
                /* :: */[
                  Css.fontVariant(/* normal */812216871),
                  /* :: */[
                    Css.margin(Css.zero),
                    /* :: */[
                      Css.padding(Css.zero),
                      /* :: */[
                        Css.textDecoration(/* none */-922086728),
                        /* :: */[
                          Css.whiteSpace(/* preWrap */660870029),
                          /* :: */[
                            Css.wordWrap(/* breakWord */1059921449),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var inlineDisplay = Css.style(/* :: */[
      Css.display(/* inline */423610969),
      /* [] */0
    ]);

var blockDisplay = Css.style(/* :: */[
      Css.display(/* block */888960333),
      /* [] */0
    ]);

function createStyleBasedOnTextSize(textSize) {
  if (textSize !== 311976103) {
    if (textSize >= 861718677) {
      return Css.style(/* :: */[
                  Css.fontSize(/* `rem */[
                        5691738,
                        1
                      ]),
                  /* [] */0
                ]);
    } else {
      return Css.style(/* :: */[
                  Css.fontSize(/* `rem */[
                        5691738,
                        1.1
                      ]),
                  /* [] */0
                ]);
    }
  } else {
    return Css.style(/* :: */[
                Css.fontSize(/* `rem */[
                      5691738,
                      0.9
                    ]),
                /* [] */0
              ]);
  }
}

function createStyleBasedOnTextType(textVariant, colors) {
  if (textVariant >= 67972948) {
    return Css.style(/* :: */[
                Css.color(colors[/* black */2][/* lighter */3]),
                /* [] */0
              ]);
  } else {
    return Css.style(/* :: */[
                Css.color(colors[/* black */2][/* neutral */2]),
                /* [] */0
              ]);
  }
}

function createStyleBasedOnWeight(weight) {
  if (weight !== 692110643) {
    if (weight >= 737455525) {
      return Css.style(/* :: */[
                  Css.fontWeight(/* bold */-1055161979),
                  /* [] */0
                ]);
    } else {
      return Css.style(/* :: */[
                  Css.fontWeight(/* normal */812216871),
                  /* [] */0
                ]);
    }
  } else {
    return Css.style(/* :: */[
                Css.fontWeight(/* semiBold */-812709613),
                /* [] */0
              ]);
  }
}

var strikeThrough = Css.style(/* :: */[
      Css.textDecoration(/* lineThrough */412155569),
      /* [] */0
    ]);

function maxLines(maxLines$1, param) {
  if (maxLines$1 !== undefined) {
    return Css.style(/* :: */[
                Css.overflow(/* hidden */-862584982),
                /* :: */[
                  Css.textOverflow(/* ellipsis */166888785),
                  /* :: */[
                    Css.unsafe("display", "-webkit-box"),
                    /* :: */[
                      Css.important(Css.unsafe("-webkit-line-clamp", String(maxLines$1))),
                      /* :: */[
                        Css.unsafe("-webkit-box-orient", "vertical"),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]);
  } else {
    return "";
  }
}

var Styles = {
  base: base,
  inlineDisplay: inlineDisplay,
  blockDisplay: blockDisplay,
  createStyleBasedOnTextSize: createStyleBasedOnTextSize,
  createStyleBasedOnTextType: createStyleBasedOnTextType,
  createStyleBasedOnWeight: createStyleBasedOnWeight,
  strikeThrough: strikeThrough,
  maxLines: maxLines
};

var context = React.createContext(false);

var make = context.Provider;

var Provider = {
  make: make
};

var Parent = {
  context: context,
  Provider: Provider
};

function $$Text(Props) {
  var value = Props.value;
  var match = Props.style;
  var style = match !== undefined ? match : "";
  var match$1 = Props.variant;
  var variant = match$1 !== undefined ? match$1 : /* Primary */-791844958;
  var match$2 = Props.size;
  var size = match$2 !== undefined ? match$2 : /* Medium */861718677;
  var match$3 = Props.weight;
  var weight = match$3 !== undefined ? match$3 : /* Normal */-453122489;
  var match$4 = Props.strikeThrough;
  var strikeThrough$1 = match$4 !== undefined ? match$4 : false;
  var maxLines$1 = Props.maxLines;
  var children = Props.children;
  var id = Props.id;
  var tooltip = Props.tooltip;
  var colors = React.useContext(Theme$KalseljsCommunityPage.context);
  var hasParentText = React.useContext(context);
  var resolvedStyle = Css.merge(/* :: */[
        base,
        /* :: */[
          createStyleBasedOnTextType(variant, colors),
          /* :: */[
            createStyleBasedOnTextSize(size),
            /* :: */[
              createStyleBasedOnWeight(weight),
              /* :: */[
                hasParentText ? inlineDisplay : blockDisplay,
                /* :: */[
                  strikeThrough$1 ? strikeThrough : "",
                  /* :: */[
                    maxLines(maxLines$1, /* () */0),
                    /* :: */[
                      style,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]);
  var text = value !== undefined ? value : Curry._2(Utils$KalseljsCommunityPage.$$Option.Infix.$pipe$question, children, null);
  if (hasParentText) {
    var tmp = {
      className: resolvedStyle
    };
    if (id !== undefined) {
      tmp.id = Caml_option.valFromOption(id);
    }
    return React.createElement("span", tmp, text);
  } else {
    var tmp$1 = {
      className: resolvedStyle
    };
    if (id !== undefined) {
      tmp$1.id = Caml_option.valFromOption(id);
    }
    if (tooltip !== undefined) {
      tmp$1.title = Caml_option.valFromOption(tooltip);
    }
    return React.createElement(make, {
                value: true,
                children: React.createElement("p", tmp$1, text)
              });
  }
}

var make$1 = $$Text;

exports.Styles = Styles;
exports.Parent = Parent;
exports.make = make$1;
/* base Not a pure module */
