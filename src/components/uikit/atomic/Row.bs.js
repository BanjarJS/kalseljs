// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var View$KalseljsCommunityPage = require("./View.bs.js");
var Utils$KalseljsCommunityPage = require("../../../commons/Utils.bs.js");

function createBase(justifyContentValue, alignItemsValue) {
  var base = Css.style(/* :: */[
        Css.flexDirection(/* row */5693978),
        /* [] */0
      ]);
  return Css.merge(/* :: */[
              base,
              /* :: */[
                Curry._2(Utils$KalseljsCommunityPage.$$Option.Infix.$pipe$question, Curry._2(Utils$KalseljsCommunityPage.$$Option.Infix.$less$$great, justifyContentValue, (function (v) {
                            return Css.style(/* :: */[
                                        Css.justifyContent(v),
                                        /* [] */0
                                      ]);
                          })), ""),
                /* :: */[
                  Curry._2(Utils$KalseljsCommunityPage.$$Option.Infix.$pipe$question, Curry._2(Utils$KalseljsCommunityPage.$$Option.Infix.$less$$great, alignItemsValue, (function (v) {
                              return Css.style(/* :: */[
                                          Css.alignItems(v),
                                          /* [] */0
                                        ]);
                            })), ""),
                  /* [] */0
                ]
              ]
            ]);
}

var Styles = {
  merge: Css.merge,
  createBase: createBase
};

function Row(Props) {
  var match = Props.style;
  var style = match !== undefined ? match : "";
  var forwardRef = Props.forwardRef;
  var onScroll = Props.onScroll;
  var onPress = Props.onPress;
  var onMouseEnter = Props.onMouseEnter;
  var onMouseLeave = Props.onMouseLeave;
  var justifyContent = Props.justifyContent;
  var alignItems = Props.alignItems;
  var id = Props.id;
  var children = Props.children;
  var resolvedStyle = Css.merge(/* :: */[
        createBase(justifyContent, alignItems),
        /* :: */[
          style,
          /* [] */0
        ]
      ]);
  var tmp = {
    style: resolvedStyle,
    children: children
  };
  if (onScroll !== undefined) {
    tmp.onScroll = Caml_option.valFromOption(onScroll);
  }
  if (onPress !== undefined) {
    tmp.onPress = Caml_option.valFromOption(onPress);
  }
  if (onMouseEnter !== undefined) {
    tmp.onMouseEnter = Caml_option.valFromOption(onMouseEnter);
  }
  if (onMouseLeave !== undefined) {
    tmp.onMouseLeave = Caml_option.valFromOption(onMouseLeave);
  }
  if (forwardRef !== undefined) {
    tmp.forwardRef = Caml_option.valFromOption(forwardRef);
  }
  if (id !== undefined) {
    tmp.id = Caml_option.valFromOption(id);
  }
  return React.createElement(View$KalseljsCommunityPage.make, tmp);
}

var make = Row;

exports.Styles = Styles;
exports.make = make;
/* Css Not a pure module */
