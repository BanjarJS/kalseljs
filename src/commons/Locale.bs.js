// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var ReactIntl = require("react-intl");
var BnJson = require("translations/bn.json");
var EnJson = require("translations/en.json");
var IdJson = require("translations/id.json");
var Utils$KalseljsCommunityPage = require("./Utils.bs.js");

var all = /* array */[
  /* En */0,
  /* Id */1,
  /* Bn */2
];

function toString(param) {
  switch (param) {
    case /* En */0 :
        return "en";
    case /* Id */1 :
        return "id";
    case /* Bn */2 :
        return "bn";
    
  }
}

function translations(param) {
  switch (param) {
    case /* En */0 :
        return EnJson;
    case /* Id */1 :
        return IdJson;
    case /* Bn */2 :
        return BnJson;
    
  }
}

function reducer(param, action) {
  return action[0];
}

function initValue_001(param) {
  return /* () */0;
}

var initValue = /* tuple */[
  /* Bn */2,
  initValue_001
];

var context = React.createContext(initValue);

function useLanguange(param) {
  return React.useContext(context);
}

var Context = {
  initialState: /* Bn */2,
  initValue: initValue,
  context: context,
  useLanguange: useLanguange
};

var make = context.Provider;

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var Internal_Provider = {
  make: make,
  makeProps: makeProps
};

function Locale$Provider(Props) {
  var children = Props.children;
  var match = React.useReducer(reducer, /* Bn */2);
  var locale = match[0];
  return React.createElement(make, makeProps(/* tuple */[
                  locale,
                  match[1]
                ], React.createElement(ReactIntl.IntlProvider, {
                      locale: toString(locale),
                      messages: Utils$KalseljsCommunityPage.translationsToDict(translations(locale)),
                      children: children
                    }), /* () */0));
}

var Provider = {
  make: Locale$Provider
};

exports.all = all;
exports.toString = toString;
exports.translations = translations;
exports.reducer = reducer;
exports.Context = Context;
exports.Internal_Provider = Internal_Provider;
exports.Provider = Provider;
/* context Not a pure module */
